#!/usr/bin/env node

const app = require('../app')
const debug = require('debug')('express-sequelize')
const http = require('http')
const db = require('../models')
const port = normalizePort(process.env.PORT || '3000')
const server = http.createServer( app )

app.set('port', port)

// Sync all the models and DB for Sequelize before server starts
db.sequelize.sync().then(() => {
    console.log('Syncing sequelize DB')
    server.listen(port)
    server.on('error', onError)
    server.on('listening', onListening)
})

function normalizePort(val) {
    let port = parseInt(val, 10)

    if ( isNaN( port ) )
        return val

    if ( port >= 0 )
        return port

    return false
}

function onError( error ) {
    if ( error.syscall !== 'listen' )
        throw error

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    switch ( error.code ) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

function onListening() {
    let addr = server.address()
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    console.log('Server is now listening on ' + bind)
}

module.exports = function( callback ) {
    db.sequelize.sync().then(() => {
        console.log('Syncing sequelize DB')
        server.listen(port)
        server.on('error', onError)
        server.on('listening', onListening)
        callback()
    })
}